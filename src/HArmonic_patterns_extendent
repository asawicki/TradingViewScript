//@version=6
indicator("Harmonic Patterns: Kombinacje pivotów + predykcja D (rysuj aktywne)", overlay=true, max_lines_count=500, max_labels_count=500)

// 1. Ustawienia / Inputs
pivotLenShort    = input.int(3, "Short Pivot Length", minval=1)
pivotLenLong     = input.int(10, "Long Pivot Length", minval=1)
minPivotDistance = input.int(3, "Minimum Bars Between Pivots", minval=1)
pivotMax         = input.int(10, "Max Pivot Count", minval=5)

tol                 = input.float(0.05, "Tolerancja (Fib)", step=0.01)
incompleteThreshold = input.float(0.8, "Procent niepełnego paternu do predykcji", step=0.1, minval=0.0, maxval=1.0)
labelOffset         = input.float(10.0, "Offset etykiety (w jednostkach ceny)", step=0.1)
showPatternFill     = input.bool(true, "Show Pattern Fill?")
showRatioLabels     = input.bool(true, "Show Ratio Labels?")
combineRatioLabels  = input.bool(false, "Combine Ratio Labels into one?")
labelSizeChoice     = input.string("small", "Label Size", options=["tiny","small","normal","large"])
onlyLastPattern     = input.bool(false, "Only Last Pattern?")
useConfluence       = input.bool(true, "Używaj prostej konfluencji Fibo przy predykcji D?")
extendedFiboLevels  = input.bool(true, "Pokazuj dodatkowe potencjalne poziomy D?")
rangePercent        = input.float(2.0, "Procent strefy wokół targetu/predykcji (%)", step=0.1)

// --------------------------------------------------------------------
// DODANE NOWE INPUTY ograniczające liczbę rysowanych formacji
maxGartley    = input.int(2, "Max Gartley Patterns", minval=0)
maxBat        = input.int(2, "Max Bat Patterns", minval=0)
maxButterfly  = input.int(2, "Max Butterfly Patterns", minval=0)
maxShark      = input.int(2, "Max Shark Patterns", minval=0)
// --------------------------------------------------------------------

// Funkcja do rozmiaru etykiet
f_getLabelSize(sz) =>
    sz == "tiny"   ? size.tiny :
     sz == "small"  ? size.small :
      sz == "normal" ? size.normal :
       size.large

labelSize = f_getLabelSize(labelSizeChoice)

// 3. Rysowane obiekty – linie i etykiety
var lines  = array.new_line()
var labels = array.new_label()

f_clearObjects() =>
    if array.size(lines) > 0
        for i = 0 to array.size(lines) - 1
            line.delete(array.get(lines, i))
    array.clear(lines)
    if array.size(labels) > 0
        for j = 0 to array.size(labels) - 1
            label.delete(array.get(labels, j))
    array.clear(labels)

// ---------------------------------------------------------------------
// Funkcja rysująca zakres wokół ceny
f_drawRangeAroundPrice(_barIndex, _price, _color, _pct) =>
    lowPrice  = _price * (1.0 - _pct / 100.0)
    highPrice = _price * (1.0 + _pct / 100.0)
    lineLow   = line.new(_barIndex, lowPrice, bar_index, lowPrice, color=color.new(_color, 0), style=line.style_dotted, width=1, extend=extend.right)
    lineHigh  = line.new(_barIndex, highPrice, bar_index, highPrice, color=color.new(_color, 0), style=line.style_dotted, width=1, extend=extend.right)
    linefill.new(lineLow, lineHigh, color.new(_color, 85))

// ---------------------------------------------------------------------
// Zbieranie pivotów – wykrywane są zarówno pivots krótkie, jak i długie
var pivots     = array.new_float()
var pivotsBars = array.new_int()
var pivotsTime = array.new_int()

f_addPivot(_pivot, _pivotBar, _pivotTime) =>
    if array.size(pivots) == 0 or (_pivotBar - array.get(pivotsBars, array.size(pivots) - 1)) >= minPivotDistance
        array.push(pivots, _pivot)
        array.push(pivotsBars, _pivotBar)
        array.push(pivotsTime, _pivotTime)

phShort = ta.pivothigh(high, pivotLenShort, pivotLenShort)
plShort = ta.pivotlow(low, pivotLenShort, pivotLenShort)
phLong  = ta.pivothigh(high, pivotLenLong, pivotLenLong)
plLong  = ta.pivotlow(low, pivotLenLong, pivotLenLong)

if not na(phLong)
    f_addPivot(phLong, bar_index - pivotLenLong, time[pivotLenLong])
if not na(plLong)
    f_addPivot(plLong, bar_index - pivotLenLong, time[pivotLenLong])
if not na(phShort)
    f_addPivot(phShort, bar_index - pivotLenShort, time[pivotLenShort])
if not na(plShort)
    f_addPivot(plShort, bar_index - pivotLenShort, time[pivotLenShort])

if array.size(pivots) > pivotMax
    array.shift(pivots)
    array.shift(pivotsBars)
    array.shift(pivotsTime)

// ---------------------------------------------------------------------

// Funkcja rysująca pełną formację (X->A->B->C->D)
f_drawPattern(_title, _col, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD) =>
    lXA = line.new(X_bar, X, A_bar, A, color=_col, width=2)
    lAB = line.new(A_bar, A, B_bar, B, color=_col, width=2)
    lBC = line.new(B_bar, B, C_bar, C, color=_col, width=2)
    lCD = line.new(C_bar, C, D_bar, D, color=_col, width=2)
    lDX = line.new(D_bar, D, X_bar, X, color=_col, width=2)
    array.push(lines, lXA)
    array.push(lines, lAB)
    array.push(lines, lBC)
    array.push(lines, lCD)
    array.push(lines, lDX)
    
    lblX = label.new(X_bar, X + labelOffset, "X", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblA = label.new(A_bar, A + labelOffset, "A", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblB = label.new(B_bar, B + labelOffset, "B", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblC = label.new(C_bar, C + labelOffset, "C", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblD = label.new(D_bar, D + labelOffset, "D", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    array.push(labels, lblX)
    array.push(labels, lblA)
    array.push(labels, lblB)
    array.push(labels, lblC)
    array.push(labels, lblD)
    
    if showPatternFill
        linefill.new(lXA, lAB, color.new(_col, 85))
        linefill.new(lAB, lBC, color.new(_col, 85))
        linefill.new(lBC, lCD, color.new(_col, 85))
        linefill.new(lCD, lDX, color.new(_col, 85))
    
    midPrice = (X + A + B + C + D) / 5.0
    midTime  = (X_time + A_time + B_time + C_time + D_time) / 5
    lblTitle = label.new(int(midTime), midPrice, _title, style=label.style_label_upper_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=labelSize)
    array.push(labels, lblTitle)
    
    if showRatioLabels
        if combineRatioLabels
            ratioText = str.format("AB/XA={0}\nBC/AB={1}\nCD/BC={2}\nXD/XA={3}",str.tostring(ratioAB, format.mintick),str.tostring(ratioBC, format.mintick),str.tostring(ratioCD, format.mintick),str.tostring(ratioXD, format.mintick))
            ratioMidPrice = (A + B + C + D + X) / 5.0
            ratioMidTime  = (A_time + B_time + C_time + D_time + X_time) / 5
            lblRatio = label.new(int(ratioMidTime), ratioMidPrice, ratioText, style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            array.push(labels, lblRatio)
        else
            lblAB = label.new(int((A_time + B_time) / 2), (A + B) / 2, "AB/XA=" + str.tostring(ratioAB, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblBC = label.new(int((B_time + C_time) / 2), (B + C) / 2, "BC/AB=" + str.tostring(ratioBC, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblCD = label.new(int((C_time + D_time) / 2), (C + D) / 2, "CD/BC=" + str.tostring(ratioCD, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblXD = label.new(int((D_time + X_time) / 2), (D + X) / 2, "XD/XA=" + str.tostring(ratioXD, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            array.push(labels, lblAB)
            array.push(labels, lblBC)
            array.push(labels, lblCD)
            array.push(labels, lblXD)

// Funkcje sprawdzające kierunek formacji
f_validBullishSequence(X, A, B, C) => (X > A) and (B > A) and (C < B)
f_validBearishSequence(X, A, B, C) => (X < A) and (B < A) and (C > B)

// ---------------------------------------------------------------------
// Detekcja formacji – iteracja po kombinacjach 5 pivotów

// Deklaracja tablic kandydatów
var candidateTypes         = array.new_string()
var candidateXArr          = array.new_float()
var candidateAArr          = array.new_float()
var candidateBArr          = array.new_float()
var candidateCArr          = array.new_float()
var candidateDArr          = array.new_float()
var candidateX_barArr      = array.new_int()
var candidateA_barArr      = array.new_int()
var candidateB_barArr      = array.new_int()
var candidateC_barArr      = array.new_int()
var candidateD_barArr      = array.new_int()
var candidateX_timeArr     = array.new_int()
var candidateA_timeArr     = array.new_int()
var candidateB_timeArr     = array.new_int()
var candidateC_timeArr     = array.new_int()
var candidateD_timeArr     = array.new_int()
var candidateRatioABArr    = array.new_float()
var candidateRatioBCArr    = array.new_float()
var candidateRatioCDArr    = array.new_float()
var candidateRatioXDArr    = array.new_float()
var candidateColorArr      = array.new_color()
var candidateTargetPriceArr = array.new_float()

// <-- ZMIANA: Czyszczenie tablic kandydatów na początku każdej świecy, aby nie kumulowały się dane z poprzednich barów
array.clear(candidateTypes)
array.clear(candidateXArr)
array.clear(candidateAArr)
array.clear(candidateBArr)
array.clear(candidateCArr)
array.clear(candidateDArr)
array.clear(candidateX_barArr)
array.clear(candidateA_barArr)
array.clear(candidateB_barArr)
array.clear(candidateC_barArr)
array.clear(candidateD_barArr)
array.clear(candidateX_timeArr)
array.clear(candidateA_timeArr)
array.clear(candidateB_timeArr)
array.clear(candidateC_timeArr)
array.clear(candidateD_timeArr)
array.clear(candidateRatioABArr)
array.clear(candidateRatioBCArr)
array.clear(candidateRatioCDArr)
array.clear(candidateRatioXDArr)
array.clear(candidateColorArr)
array.clear(candidateTargetPriceArr)

// Reset rysowanych obiektów
f_clearObjects()

// Reset liczników dla rysowanych formacji
var int gartleyCount = 0
var int batCount = 0
var int butterflyCount = 0
var int sharkCount = 0

gartleyCount := 0
batCount := 0
butterflyCount := 0
sharkCount := 0
// ---------------------------------------------------------------------

if array.size(pivots) >= 5
    for i = 0 to array.size(pivots) - 5
        for j = i + 1 to array.size(pivots) - 4
            for k = j + 1 to array.size(pivots) - 3
                for l = k + 1 to array.size(pivots) - 2
                    for m = l + 1 to array.size(pivots) - 1
                        X = array.get(pivots, i)
                        A = array.get(pivots, j)
                        B = array.get(pivots, k)
                        C = array.get(pivots, l)
                        D = array.get(pivots, m)
                        X_bar = array.get(pivotsBars, i)
                        A_bar = array.get(pivotsBars, j)
                        B_bar = array.get(pivotsBars, k)
                        C_bar = array.get(pivotsBars, l)
                        D_bar = array.get(pivotsBars, m)
                        X_time = array.get(pivotsTime, i)
                        A_time = array.get(pivotsTime, j)
                        B_time = array.get(pivotsTime, k)
                        C_time = array.get(pivotsTime, l)
                        D_time = array.get(pivotsTime, m)
                        
                        isBullish = f_validBullishSequence(X, A, B, C)
                        isBearish = f_validBearishSequence(X, A, B, C)
                        
                        XA = math.abs(A - X)
                        AB = math.abs(B - A)
                        BC = math.abs(C - B)
                        CD = math.abs(D - C)
                        XD = math.abs(D - X)
                        ratioAB = XA != 0 ? AB / XA : na
                        ratioBC = AB != 0 ? BC / AB : na
                        ratioCD = BC != 0 ? CD / BC : na
                        ratioXD = XA != 0 ? XD / XA : na
                        
                        var bool localPatternFound = false
                        var string localPatternName  = ""
                        var color localColor        = color.gray
                        var float localTarget       = na
                        
                        // Dla formacji Shark wyliczamy przewidywany punkt C
                        predictedCShark = isBullish ? (X - 1.13 * (X - A)) : (X + 1.13 * (A - X))
                           
                        
                        if isBullish
                            // Gartley
                            if ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (0.786 - tol) and ratioXD <= (0.786 + tol)
                                localPatternFound := true
                                localPatternName  := "Bullish Gartley"
                                localColor        := color.green
                                localTarget       := X > A ? (X - 0.786 * (X - A)) : (X + 0.786 * (A - X))
                            // Bat
                            else if ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (0.886 - tol) and ratioXD <= (0.886 + tol)
                                localPatternFound := true
                                localPatternName  := "Bullish Bat"
                                localColor        := color.blue
                                localTarget       := X > A ? (X - 0.886 * (X - A)) : (X + 0.886 * (A - X))
                            // Butterfly
                            else if ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (1.27 - tol) and ratioXD <= (1.27 + tol)
                                localPatternFound := true
                                localPatternName  := "Bullish Butterfly"
                                localColor        := color.orange
                                localTarget       := X > A ? (X - 1.27 * (X - A)) : (X + 1.27 * (A - X))
                            // Shark
                            else if ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol) and math.abs(D - predictedCShark) <= tol * math.abs(predictedCShark)
                                localPatternFound := true
                                localPatternName  := "Bullish Shark"
                                localColor        := color.purple
                                localTarget       := predictedCShark
                        else if isBearish
                            // Gartley
                            if ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (0.786 - tol) and ratioXD <= (0.786 + tol)
                                localPatternFound := true
                                localPatternName  := "Bearish Gartley"
                                localColor        := color.red
                                localTarget       := X < A ? (X + 0.786 * (A - X)) : (X - 0.786 * (X - A))
                            // Bat
                            else if ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (0.886 - tol) and ratioXD <= (0.886 + tol)
                                localPatternFound := true
                                localPatternName  := "Bearish Bat"
                                localColor        := color.maroon
                                localTarget       := X < A ? (X + 0.886 * (A - X)) : (X - 0.886 * (X - A))
                            // Butterfly
                            else if ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol) and ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol) and ratioXD >= (1.27 - tol) and ratioXD <= (1.27 + tol)
                                localPatternFound := true
                                localPatternName  := "Bearish Butterfly"
                                localColor        := color.fuchsia
                                localTarget       := X < A ? (X + 1.27 * (A - X)) : (X - 1.27 * (X - A))
                            // Shark
                            else if ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol) and math.abs(D - predictedCShark) <= tol * math.abs(predictedCShark)
                                localPatternFound := true
                                localPatternName  := "Bearish Shark"
                                localColor        := color.navy
                                localTarget       := predictedCShark
                        
                        // <-- ZMIANA: Dodajemy kandydata tylko gdy liczba elementów w tablicach kandydatów jest mniejsza niż 100000
                        if localPatternFound and array.size(candidateTypes) < 100000
                            array.push(candidateTypes, localPatternName)
                            array.push(candidateXArr, X)
                            array.push(candidateAArr, A)
                            array.push(candidateBArr, B)
                            array.push(candidateCArr, C)
                            array.push(candidateDArr, D)
                            array.push(candidateX_barArr, X_bar)
                            array.push(candidateA_barArr, A_bar)
                            array.push(candidateB_barArr, B_bar)
                            array.push(candidateC_barArr, C_bar)
                            array.push(candidateD_barArr, D_bar)
                            array.push(candidateX_timeArr, X_time)
                            array.push(candidateA_timeArr, A_time)
                            array.push(candidateB_timeArr, B_time)
                            array.push(candidateC_timeArr, C_time)
                            array.push(candidateD_timeArr, D_time)
                            array.push(candidateRatioABArr, ratioAB)
                            array.push(candidateRatioBCArr, ratioBC)
                            array.push(candidateRatioCDArr, ratioCD)
                            array.push(candidateRatioXDArr, ratioXD)
                            array.push(candidateColorArr, localColor)
                            array.push(candidateTargetPriceArr, localTarget)

// ---------------------------------------------------------------------
// Rysowanie kandydatów – rysujemy te formacje, które nie zostały zanegowane
if array.size(candidateTypes) > 0 
    for idx = 0 to array.size(candidateTypes) - 1
        _title   = array.get(candidateTypes, idx)
        _col     = array.get(candidateColorArr, idx)
        _X       = array.get(candidateXArr, idx)
        _A       = array.get(candidateAArr, idx)
        _B       = array.get(candidateBArr, idx)
        _C       = array.get(candidateCArr, idx)
        _D       = array.get(candidateDArr, idx)
        _X_bar   = array.get(candidateX_barArr, idx)
        _A_bar   = array.get(candidateA_barArr, idx)
        _B_bar   = array.get(candidateB_barArr, idx)
        _C_bar   = array.get(candidateC_barArr, idx)
        _D_bar   = array.get(candidateD_barArr, idx)
        _X_time  = array.get(candidateX_timeArr, idx)
        _A_time  = array.get(candidateA_timeArr, idx)
        _B_time  = array.get(candidateB_timeArr, idx)
        _C_time  = array.get(candidateC_timeArr, idx)
        _D_time  = array.get(candidateD_timeArr, idx)
        _ratioAB = array.get(candidateRatioABArr, idx)
        _ratioBC = array.get(candidateRatioBCArr, idx)
        _ratioCD = array.get(candidateRatioCDArr, idx)
        _ratioXD = array.get(candidateRatioXDArr, idx)
        _target  = array.get(candidateTargetPriceArr, idx)
        
        // Warunki "niezanegowania":
        condActive = (str.contains(_title, "Bullish") and close > _target) or
                     (str.contains(_title, "Bearish") and close < _target)
        
        // Rozpoznanie typu formacji
        baseType = str.contains(_title, "Gartley")    ? "Gartley" :
                   str.contains(_title, "Bat")        ? "Bat" :
                   str.contains(_title, "Butterfly")  ? "Butterfly" :
                   str.contains(_title, "Shark")      ? "Shark" :
                   "Unknown"
        
        canDraw = false
        
        if condActive
            if baseType == "Gartley" and gartleyCount < maxGartley
                canDraw := true
            else if baseType == "Bat" and batCount < maxBat
                canDraw := true
            else if baseType == "Butterfly" and butterflyCount < maxButterfly
                canDraw := true
            else if baseType == "Shark" and sharkCount < maxShark
                canDraw := true
        
        if canDraw
            f_drawPattern(_title, _col, _X, _A, _B, _C, _D, _X_bar, _A_bar, _B_bar, _C_bar, _D_bar, _X_time, _A_time, _B_time, _C_time, _D_time, _ratioAB, _ratioBC, _ratioCD, _ratioXD)
            line.new(_D_bar, _D, bar_index, _D, color=_col, style=line.style_dotted, width=2, extend=extend.right)
            f_drawRangeAroundPrice(_D_bar, _D, _col, rangePercent)
            
            if baseType == "Gartley"
                gartleyCount += 1
            else if baseType == "Bat"
                batCount += 1
            else if baseType == "Butterfly"
                butterflyCount += 1
            else if baseType == "Shark"
                sharkCount += 1
