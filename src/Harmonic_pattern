//@version=6
indicator("Harmonic Pattern Detector (Gartley, Bat, Butterfly & Shark with Target & Prediction) - v6", overlay=true, max_lines_count=500, max_labels_count=500)

// Parametry wejściowe
pivotLen            = input.int(5, "Długość pivota", minval=1)
tol                 = input.float(0.05, "Tolerancja", step=0.01, tooltip="Dozwolony odchyłek od idealnych stosunków (np. 0.05 oznacza ±5%)")
incompleteThreshold = input.float(0.8, "Procent niepełnego paternu do predykacji", step=0.1, minval=0.0, maxval=1.0)
labelOffset         = input.float(10.0, "Offset etykiety (w jednostkach ceny)", step=0.1)

// Funkcje wykrywające pivot high i pivot low
ph = ta.pivothigh(high, pivotLen, pivotLen)
pl = ta.pivotlow(low, pivotLen, pivotLen)

// Tablice do przechowywania pivotów oraz odpowiadających im bar_index
var pivots     = array.new_float()
var pivotsBars = array.new_int()

// Dodajemy pivot – zarówno high, jak i low
if not na(ph)
    array.push(pivots, ph)
    array.push(pivotsBars, bar_index - pivotLen)
if not na(pl)
    array.push(pivots, pl)
    array.push(pivotsBars, bar_index - pivotLen)

// Utrzymujemy tylko ostatnie 5 pivotów
if array.size(pivots) > 5
    array.shift(pivots)
    array.shift(pivotsBars)

// Rysowanie pivotów (dla debugowania) – etykiety powyżej świec
if array.size(pivots) > 0
    for i = 0 to array.size(pivots) - 1
        label.new(array.get(pivotsBars, i), array.get(pivots, i) + labelOffset, str.tostring(i), 
          style=label.style_label_left, color=color.gray, textcolor=color.white, size=size.tiny, yloc=yloc.abovebar)

// ------------------------
// 1. PEŁNE WZORCE (5 pivotów)
// ------------------------
if array.size(pivots) == 5
    X = array.get(pivots, 0)
    A = array.get(pivots, 1)
    B = array.get(pivots, 2)
    C = array.get(pivots, 3)
    D = array.get(pivots, 4)
    X_bar = array.get(pivotsBars, 0)
    A_bar = array.get(pivotsBars, 1)
    B_bar = array.get(pivotsBars, 2)
    C_bar = array.get(pivotsBars, 3)
    D_bar = array.get(pivotsBars, 4)
    
    XA = math.abs(A - X)
    AB = math.abs(B - A)
    BC = math.abs(C - B)
    XD = math.abs(D - X)
    
    ratioAB = XA != 0 ? AB / XA : na
    ratioBC = AB != 0 ? BC / AB : na
    ratioXD = XA != 0 ? XD / XA : na
    
    isGartley   = (ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (0.786 - tol) and ratioXD <= (0.786 + tol))
    isBat       = (ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (0.886 - tol) and ratioXD <= (0.886 + tol))
    isButterfly = (ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (1.27 - tol) and ratioXD <= (1.27 + tol))
    
    // Dla paternu Shark w pełnym paternie wykorzystujemy strukturę X, A, B, D (pomijając C)
    predictedCShark = X > A ? X - 1.13 * (X - A) : X + 1.13 * (A - X)
    isShark = (ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol)) and (math.abs(D - predictedCShark) <= tol * predictedCShark)
    
    if isGartley
        line.new(X_bar, X, A_bar, A, color=color.green, width=2)
        line.new(A_bar, A, B_bar, B, color=color.green, width=2)
        line.new(B_bar, B, C_bar, C, color=color.green, width=2)
        line.new(C_bar, C, D_bar, D, color=color.green, width=2)
        label.new(D_bar, D + labelOffset, "Gartley", style=label.style_label_down, color=color.green, textcolor=color.white, yloc=yloc.abovebar)
        targetPrice = X > A ? X - 0.786 * (X - A) : X + 0.786 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.green, style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, targetPrice + labelOffset, "Target: " + str.tostring(targetPrice, format.mintick), style=label.style_label_right, color=color.green, textcolor=color.white, yloc=yloc.abovebar)
    
    if isBat
        line.new(X_bar, X, A_bar, A, color=color.blue, width=2)
        line.new(A_bar, A, B_bar, B, color=color.blue, width=2)
        line.new(B_bar, B, C_bar, C, color=color.blue, width=2)
        line.new(C_bar, C, D_bar, D, color=color.blue, width=2)
        label.new(D_bar, D + labelOffset, "Bat", style=label.style_label_down, color=color.blue, textcolor=color.white, yloc=yloc.abovebar)
        targetPrice = X > A ? X - 0.886 * (X - A) : X + 0.886 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.blue, style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, targetPrice + labelOffset, "Target: " + str.tostring(targetPrice, format.mintick), style=label.style_label_right, color=color.blue, textcolor=color.white, yloc=yloc.abovebar)
    
    if isButterfly
        line.new(X_bar, X, A_bar, A, color=color.orange, width=2)
        line.new(A_bar, A, B_bar, B, color=color.orange, width=2)
        line.new(B_bar, B, C_bar, C, color=color.orange, width=2)
        line.new(C_bar, C, D_bar, D, color=color.orange, width=2)
        label.new(D_bar, D + labelOffset, "Butterfly", style=label.style_label_down, color=color.orange, textcolor=color.white, yloc=yloc.abovebar)
        targetPrice = X > A ? X - 1.27 * (X - A) : X + 1.27 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.orange, style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, targetPrice + labelOffset, "Target: " + str.tostring(targetPrice, format.mintick), style=label.style_label_right, color=color.orange, textcolor=color.white, yloc=yloc.abovebar)
    
    if isShark
        // Dla paternu Shark (pełny) wykorzystujemy strukturę X, A, B, D
        line.new(X_bar, X, A_bar, A, color=color.purple, width=2)
        line.new(A_bar, A, B_bar, B, color=color.purple, width=2)
        line.new(B_bar, B, D_bar, D, color=color.purple, width=2)
        label.new(D_bar, D + labelOffset, "Shark", style=label.style_label_down, color=color.purple, textcolor=color.white, yloc=yloc.abovebar)
        // Dodajemy linię targetu dla Shark (rozciągniętą do prawej)
        line.new(D_bar, predictedCShark, bar_index, predictedCShark, color=color.purple, style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, predictedCShark + labelOffset, "Target: " + str.tostring(predictedCShark, format.mintick), style=label.style_label_right, color=color.purple, textcolor=color.white, yloc=yloc.abovebar)
        label.new(bar_index, predictedCShark, "Predicted D (Shark)", style=label.style_label_down, color=color.purple, textcolor=color.white, yloc=yloc.abovebar)
        
// ------------------------
// 2. PREDYKCJA WZORCA (gdy mamy niepełny patern – 4 pivoty)
// ------------------------
else if array.size(pivots) == 4 and (array.size(pivots) / 5.0 >= incompleteThreshold)
    X = array.get(pivots, 0)
    A = array.get(pivots, 1)
    B = array.get(pivots, 2)
    C = array.get(pivots, 3)
    X_bar = array.get(pivotsBars, 0)
    A_bar = array.get(pivotsBars, 1)
    B_bar = array.get(pivotsBars, 2)
    C_bar = array.get(pivotsBars, 3)
    XA = math.abs(A - X)
    AB = math.abs(B - A)
    BC = math.abs(C - B)
    ratioAB = XA != 0 ? AB / XA : na
    ratioBC = AB != 0 ? BC / AB : na
    
    potentialGartley   = (ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    predictedDGartley  = X > A ? X - 0.786 * (X - A) : X + 0.786 * (A - X)
    
    potentialBat       = (ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    predictedDBat      = X > A ? X - 0.886 * (X - A) : X + 0.886 * (A - X)
    
    potentialButterfly = (ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    predictedDButterfly= X > A ? X - 1.27 * (X - A) : X + 1.27 * (A - X)
    
    // Predykcja dla paternu Shark (dla niepełnego paternu wykorzystujemy punkt C)
    predictedCShark = X > A ? X - 1.13 * (X - A) : X + 1.13 * (A - X)
    potentialShark     = (ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol)) and (math.abs(C - predictedCShark) <= tol * predictedCShark)
    
    line.new(X_bar, X, A_bar, A, color=color.new(color.gray, 0), width=2)
    line.new(A_bar, A, B_bar, B, color=color.new(color.gray, 0), width=2)
    line.new(B_bar, B, C_bar, C, color=color.new(color.gray, 0), width=2)
    
    if potentialGartley
        line.new(C_bar, C, bar_index, predictedDGartley, color=color.new(color.green, 0), style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, predictedDGartley + labelOffset, "Predicted Gartley\nTarget: " + str.tostring(predictedDGartley, format.mintick), style=label.style_label_right, color=color.new(color.green, 0), textcolor=color.white, yloc=yloc.abovebar)
        label.new(bar_index, predictedDGartley, "Predicted D", style=label.style_label_down, color=color.green, textcolor=color.white, yloc=yloc.abovebar)
    
    if potentialBat
        line.new(C_bar, C, bar_index, predictedDBat, color=color.new(color.blue, 0), style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, predictedDBat + labelOffset, "Predicted Bat\nTarget: " + str.tostring(predictedDBat, format.mintick), style=label.style_label_right, color=color.new(color.blue, 0), textcolor=color.white, yloc=yloc.abovebar)
        label.new(bar_index, predictedDBat, "Predicted D", style=label.style_label_down, color=color.blue, textcolor=color.white, yloc=yloc.abovebar)
    
    if potentialButterfly
        line.new(C_bar, C, bar_index, predictedDButterfly, color=color.new(color.orange, 0), style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, predictedDButterfly + labelOffset, "Predicted Butterfly\nTarget: " + str.tostring(predictedDButterfly, format.mintick), style=label.style_label_right, color=color.new(color.orange, 0), textcolor=color.white, yloc=yloc.abovebar)
        label.new(bar_index, predictedDButterfly, "Predicted D", style=label.style_label_down, color=color.orange, textcolor=color.white, yloc=yloc.abovebar)
    
    if potentialShark
        line.new(C_bar, C, bar_index, predictedCShark, color=color.new(color.purple, 0), style=line.style_dotted, width=2, extend=extend.right)
        label.new(bar_index, predictedCShark + labelOffset, "Predicted Shark\nTarget: " + str.tostring(predictedCShark, format.mintick), style=label.style_label_right, color=color.new(color.purple, 0), textcolor=color.white, yloc=yloc.abovebar)
        label.new(bar_index, predictedCShark, "Predicted D (Shark)", style=label.style_label_down, color=color.purple, textcolor=color.white, yloc=yloc.abovebar)
