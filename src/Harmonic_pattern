//@version=6
indicator("Harmonic Patterns: Always show partial pattern at 4 pivots + predict D", overlay=true, max_lines_count=500, max_labels_count=500)

// 1. Ustawienia / Inputs
pivotLen            = input.int(5, "Długość pivota", minval=1)
tol                 = input.float(0.05, "Tolerancja (Fib)", step=0.01)
incompleteThreshold = input.float(0.8, "Procent niepełnego paternu do predykcji", step=0.1, minval=0.0, maxval=1.0)
labelOffset         = input.float(10.0, "Offset etykiety (w jednostkach ceny)", step=0.1)
showPatternFill     = input.bool(true, "Show Pattern Fill?")
showRatioLabels     = input.bool(true, "Show Ratio Labels?")
combineRatioLabels  = input.bool(false, "Combine Ratio Labels into one?")
labelSizeChoice     = input.string("small", "Label Size", options=["tiny","small","normal","large"])
onlyLastPattern     = input.bool(false, "Only Last Pattern?")

// Dodatkowe parametry do predykcji
useConfluence       = input.bool(true, "Używaj prostej konfluencji Fibo przy predykcji D?")
extendedFiboLevels  = input.bool(true, "Pokazuj dodatkowe potencjalne poziomy D?")

// Parametr dla stref (pasów) cenowych
rangePercent        = input.float(2.0, "Procent strefy wokół targetu/predykcji (%)", step=0.1)

// ---------------------------------------------------------------------
// Funkcja do rozmiaru etykiet – jednolinijkowo
f_getLabelSize(sz) => sz == "tiny" ? size.tiny : sz == "small" ? size.small : sz == "normal" ? size.normal : size.large
labelSize = f_getLabelSize(labelSizeChoice)

// 2. Tablice do przechowywania pivotów i czasu
var pivots       = array.new_float()
var pivotsBars   = array.new_int()
var pivotsTime   = array.new_int()

ph = ta.pivothigh(high, pivotLen, pivotLen)
pl = ta.pivotlow(low, pivotLen, pivotLen)



// Wieloliniowe if-y (bez then)
if not na(ph)
    array.push(pivots, ph)
    array.push(pivotsBars, bar_index - pivotLen)
    array.push(pivotsTime, time[pivotLen])

if not na(pl)
    array.push(pivots, pl)
    array.push(pivotsBars, bar_index - pivotLen)
    array.push(pivotsTime, time[pivotLen])

if array.size(pivots) > 5
    array.shift(pivots)
    array.shift(pivotsBars)
    array.shift(pivotsTime)

// 3. Referencje do obiektów (linie, etykiety) – czyszczenie
var lines  = array.new_line()
var labels = array.new_label()

f_clearObjects() =>
    for i = 0 to array.size(lines) - 1
        line.delete(array.get(lines, i))
    array.clear(lines)
    for j = 0 to array.size(labels) - 1
        label.delete(array.get(labels, j))
    array.clear(labels)

// ---------------------------------------------------------------------
// ------------------- Funkcje RYSUJĄCE / pomocnicze --------------------
// ---------------------------------------------------------------------

// Rysowanie PEŁNEJ formacji (X->A->B->C->D)
f_drawPattern(_title, _col, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD) =>
    // Linie
    lXA = line.new(X_bar, X, A_bar, A, color=_col, width=2)
    lAB = line.new(A_bar, A, B_bar, B, color=_col, width=2)
    lBC = line.new(B_bar, B, C_bar, C, color=_col, width=2)
    lCD = line.new(C_bar, C, D_bar, D, color=_col, width=2)
    lDX = line.new(D_bar, D, X_bar, X, color=_col, width=2)
    array.push(lines, lXA), array.push(lines, lAB), array.push(lines, lBC), array.push(lines, lCD), array.push(lines, lDX)

    // Etykiety X, A, B, C, D
    lblX = label.new(X_bar, X + labelOffset, "X", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblA = label.new(A_bar, A + labelOffset, "A", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblB = label.new(B_bar, B + labelOffset, "B", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblC = label.new(C_bar, C + labelOffset, "C", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblD = label.new(D_bar, D + labelOffset, "D", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    array.push(labels, lblX), array.push(labels, lblA), array.push(labels, lblB), array.push(labels, lblC), array.push(labels, lblD)

    if showPatternFill
        linefill.new(lXA, lAB, color.new(_col, 85))
        linefill.new(lAB, lBC, color.new(_col, 85))
        linefill.new(lBC, lCD, color.new(_col, 85))
        linefill.new(lCD, lDX, color.new(_col, 85))

    midPrice = (X + A + B + C + D) / 5.0
    midTime  = (X_time + A_time + B_time + C_time + D_time) / 5
    lblTitle = label.new(int(midTime), midPrice, _title, style=label.style_label_upper_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=labelSize)
    array.push(labels, lblTitle)

    // Ratio labels?
    if showRatioLabels
        if combineRatioLabels
            ratioText = str.format("AB/XA={0}\nBC/AB={1}\nCD/BC={2}\nXD/XA={3}",str.tostring(ratioAB, format.mintick),str.tostring(ratioBC, format.mintick),str.tostring(ratioCD, format.mintick),str.tostring(ratioXD, format.mintick))
            ratioMidPrice = (A + B + C + D + X) / 5.0
            ratioMidTime  = (A_time + B_time + C_time + D_time + X_time) / 5
            lblRatio = label.new(int(ratioMidTime), ratioMidPrice, ratioText, style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            array.push(labels, lblRatio)
        else
            lblAB = label.new(int((A_time + B_time) / 2), (A + B) / 2, "AB/XA=" + str.tostring(ratioAB, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblBC = label.new(int((B_time + C_time) / 2), (B + C) / 2, "BC/AB=" + str.tostring(ratioBC, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblCD = label.new(int((C_time + D_time) / 2), (C + D) / 2, "CD/BC=" + str.tostring(ratioCD, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            lblXD = label.new(int((D_time + X_time) / 2), (D + X) / 2, "XD/XA=" + str.tostring(ratioXD, format.mintick), style=label.style_label_lower_right, xloc=xloc.bar_time, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
            array.push(labels, lblAB), array.push(labels, lblBC), array.push(labels, lblCD), array.push(labels, lblXD)

// Rysowanie *częściowego* patternu (X->A->B->C) + tytuł
f_drawPartialPatternUpToC(_title, _col, X, A, B, C, X_bar, A_bar, B_bar, C_bar) =>
    // Linie
    lXA = line.new(X_bar, X, A_bar, A, color=_col, width=2)
    lAB = line.new(A_bar, A, B_bar, B, color=_col, width=2)
    lBC = line.new(B_bar, B, C_bar, C, color=_col, width=2)
    array.push(lines, lXA), array.push(lines, lAB), array.push(lines, lBC)

    // Etykiety
    lblX = label.new(X_bar, X + labelOffset, "X", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblA = label.new(A_bar, A + labelOffset, "A", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblB = label.new(B_bar, B + labelOffset, "B", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    lblC = label.new(C_bar, C + labelOffset, "C", style=label.style_label_left, yloc=yloc.abovebar, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    array.push(labels, lblX), array.push(labels, lblA), array.push(labels, lblB), array.push(labels, lblC)

    // Tytuł w połowie
    midPrice = (X + A + B + C) / 4.0
    midBarIndex = math.round((X_bar + A_bar + B_bar + C_bar) / 4)
    lblTitle = label.new(midBarIndex, midPrice, _title, style=label.style_label_upper_right, xloc=xloc.bar_index, color=color.new(_col, 0), textcolor=color.white, size=labelSize)
    array.push(labels, lblTitle)

// Funkcja do rysowania STREFY (±rangePercent) wokół ceny
f_drawRangeAroundPrice(_barIndex, _price, _color, _pct) =>
    lowPrice  = _price * (1.0 - _pct/100.0)
    highPrice = _price * (1.0 + _pct/100.0)
    lineLow   = line.new(_barIndex, lowPrice, bar_index, lowPrice, color=color.new(_color, 0), style=line.style_dotted, width=1, extend=extend.right)
    lineHigh  = line.new(_barIndex, highPrice, bar_index, highPrice, color=color.new(_color, 0), style=line.style_dotted, width=1, extend=extend.right)
    linefill.new(lineLow, lineHigh, color.new(_color, 85))


// ------------------- Definicja f_drawPredictedD(...) -------------------
f_drawPredictedD(_title, _col, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predD_bar) =>
    // Rysujemy linię od punktu C do przewidywanego D
    l = line.new(C_bar, C, predD_bar, predD, color=_col, style=line.style_dotted, width=2)
    array.push(lines, l)
    // Dodajemy etykietę "Predicted D"
    lbl = label.new(predD_bar, predD, _title + "\nPredicted D", style=label.style_label_upper_right,xloc=xloc.bar_index, color=color.new(_col, 0), textcolor=color.white, size=size.tiny)
    array.push(labels, lbl)

// ---------------------------------------------------------------------
// ------------------- Funkcje sprawdzające kierunek --------------------
// ---------------------------------------------------------------------
f_validBullishSequence(X, A, B, C) => (X > A) and (B > A) and (C < B)
f_validBearishSequence(X, A, B, C) => (X < A) and (B < A) and (C > B)

// ---------------------------------------------------------------------
// ------------------------ Detekcja 5-punktowa -------------------------
// ---------------------------------------------------------------------
if array.size(pivots) == 5
    if onlyLastPattern
        f_clearObjects()

    X     = array.get(pivots, 0)
    A     = array.get(pivots, 1)
    B     = array.get(pivots, 2)
    C     = array.get(pivots, 3)
    D     = array.get(pivots, 4)
    X_bar = array.get(pivotsBars, 0)
    A_bar = array.get(pivotsBars, 1)
    B_bar = array.get(pivotsBars, 2)
    C_bar = array.get(pivotsBars, 3)
    D_bar = array.get(pivotsBars, 4)
    X_time= array.get(pivotsTime, 0)
    A_time= array.get(pivotsTime, 1)
    B_time= array.get(pivotsTime, 2)
    C_time= array.get(pivotsTime, 3)
    D_time= array.get(pivotsTime, 4)

    isBullish = f_validBullishSequence(X, A, B, C)
    isBearish = f_validBearishSequence(X, A, B, C)

    XA = math.abs(A - X)
    AB = math.abs(B - A)
    BC = math.abs(C - B)
    CD = math.abs(D - C)
    XD = math.abs(D - X)

    ratioAB = XA != 0 ? AB / XA : na
    ratioBC = AB != 0 ? BC / AB : na
    ratioCD = BC != 0 ? CD / BC : na
    ratioXD = XA != 0 ? XD / XA : na

    isGartley   = (ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (0.786 - tol) and ratioXD <= (0.786 + tol))
    isBat       = (ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol))  and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (0.886 - tol) and ratioXD <= (0.886 + tol))
    isButterfly = (ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol)) and (ratioXD >= (1.27 - tol) and ratioXD <= (1.27 + tol))

    // Shark
    predictedCShark = if X > A
        X - 1.13 * (X - A)
    else
        X + 1.13 * (A - X)
    isShark = (ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol)) and (math.abs(D - predictedCShark) <= tol * math.abs(predictedCShark))

    // Rysowanie formacji + target
    if isBullish and isGartley
        f_drawPattern("Bullish Gartley", color.green, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X > A
            X - 0.786 * (X - A)
        else
            X + 0.786 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.green, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.green, rangePercent)

    if isBullish and isBat
        f_drawPattern("Bullish Bat", color.blue, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X > A
            X - 0.886 * (X - A)
        else
            X + 0.886 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.blue, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.blue, rangePercent)

    if isBullish and isButterfly
        f_drawPattern("Bullish Butterfly", color.orange, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X > A
            X - 1.27 * (X - A)
        else
            X + 1.27 * (A - X)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.orange, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.orange, rangePercent)

    if isBullish and isShark
        f_drawPattern("Bullish Shark", color.purple, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        line.new(D_bar, predictedCShark, bar_index, predictedCShark, color=color.purple, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, predictedCShark, color.purple, rangePercent)

    // Bearish analogicznie
    if isBearish and isGartley
        f_drawPattern("Bearish Gartley", color.red, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X < A
            X + 0.786 * (A - X)
        else
            X - 0.786 * (X - A)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.red, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.red, rangePercent)

    if isBearish and isBat
        f_drawPattern("Bearish Bat", color.maroon, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X < A
            X + 0.886 * (A - X)
        else
            X - 0.886 * (X - A)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.maroon, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.maroon, rangePercent)

    if isBearish and isButterfly
        f_drawPattern("Bearish Butterfly", color.fuchsia, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        targetPrice = if X < A
            X + 1.27 * (A - X)
        else
            X - 1.27 * (X - A)
        line.new(D_bar, targetPrice, bar_index, targetPrice, color=color.fuchsia, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, targetPrice, color.fuchsia, rangePercent)

    if isBearish and isShark
        f_drawPattern("Bearish Shark", color.navy, X, A, B, C, D, X_bar, A_bar, B_bar, C_bar, D_bar, X_time, A_time, B_time, C_time, D_time, ratioAB, ratioBC, ratioCD, ratioXD)
        line.new(D_bar, predictedCShark, bar_index, predictedCShark, color=color.navy, style=line.style_dotted, width=2, extend=extend.right)
        f_drawRangeAroundPrice(D_bar, predictedCShark, color.navy, rangePercent)

// ---------------------------------------------------------------------
// ----------- 6. Wykrywanie NIEPEŁNYCH (4 pivoty) => PREDYKCJA --------
// --- RYSUJEMY już pattern (X->A->B->C) i gdzie może być punkt D -------
// ---------------------------------------------------------------------
else if array.size(pivots) == 4
    // ewentualnie if onlyLastPattern then f_clearObjects()

    X     = array.get(pivots, 0)
    A     = array.get(pivots, 1)
    B     = array.get(pivots, 2)
    C     = array.get(pivots, 3)
    X_bar = array.get(pivotsBars, 0)
    A_bar = array.get(pivotsBars, 1)
    B_bar = array.get(pivotsBars, 2)
    C_bar = array.get(pivotsBars, 3)
    predictedD_bar = bar_index + 1  

    // Kierunek
    isBullish = f_validBullishSequence(X, A, B, C)
    isBearish = f_validBearishSequence(X, A, B, C)

    // NAJPIERW rysujemy *częściowy* pattern X->A->B->C
    // bo C dotarł już do właściwego zasięgu
    colorPartialBull = color.green
    colorPartialBear = color.red

    // Możesz sam zdecydować, czy rysujemy "zielony" / "czerwony"
    // czy inny np. "szary" — tutaj przyjmujemy, że bull/bear mają swoje kolory.
    if isBullish
        f_drawPartialPatternUpToC("Partial Bullish Pattern", colorPartialBull, X, A, B, C, X_bar, A_bar, B_bar, C_bar)
    else if isBearish
        f_drawPartialPatternUpToC("Partial Bearish Pattern", colorPartialBear, X, A, B, C, X_bar, A_bar, B_bar, C_bar)

    XA = math.abs(A - X)
    AB = math.abs(B - A)
    BC = math.abs(C - B)
    ratioAB = XA != 0 ? AB / XA : na
    ratioBC = AB != 0 ? BC / AB : na

    // -------------------- PREDYKCYJNY GARTLEY -------------------------
    isPotentialGartley = (ratioAB >= (0.618 - tol) and ratioAB <= (0.618 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    bcMin = 0.382 - tol
    bcMax = 0.886 + tol
    bcRange = bcMax - bcMin
    bcFill  = (ratioBC - bcMin) / bcRange
    canPredictGartley = isPotentialGartley and (bcFill >= incompleteThreshold)

    if canPredictGartley
        fibLevelsG = array.new_float()
        array.push(fibLevelsG, 0.786)
        if extendedFiboLevels
            array.push(fibLevelsG, 0.78)
            array.push(fibLevelsG, 0.79)

        for i = 0 to array.size(fibLevelsG) - 1
            fibVal = array.get(fibLevelsG, i)
            predD = if X > A
                X - fibVal * (X - A)
            else
                X + fibVal * (A - X)

            float predConfluence = na
            if useConfluence
                confluenceSize = 1.272 * BC
                predConfluence := if X > A
                    (C - confluenceSize)
                else
                    (C + confluenceSize)

            if useConfluence and not na(predConfluence)
                avgD = (predD + predConfluence) / 2.0
                if isBullish
                    f_drawPredictedD("Potential Bullish Gartley (conf.)", colorPartialBull, X, A, B, C, avgD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, avgD, colorPartialBull, rangePercent)
                if isBearish
                    f_drawPredictedD("Potential Bearish Gartley (conf.)", colorPartialBear, X, A, B, C, avgD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, avgD, colorPartialBear, rangePercent)
            else
                if isBullish
                    f_drawPredictedD("Potential Bullish Gartley", colorPartialBull, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBull, rangePercent)
                if isBearish
                    f_drawPredictedD("Potential Bearish Gartley", colorPartialBear, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBear, rangePercent)

    // Analogicznie Bat, Butterfly, Shark...
    // -------------------- PREDYKCYJNY BAT -----------------------------
    isPotentialBat = (ratioAB >= (0.382 - tol) and ratioAB <= (0.50 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    bcFillBat = (ratioBC - (0.382 - tol)) / ((0.886 + tol) - (0.382 - tol))
    canPredictBat = isPotentialBat and (bcFillBat >= incompleteThreshold)

    if canPredictBat
        fibLevelsB = array.new_float()
        array.push(fibLevelsB, 0.886)
        if extendedFiboLevels
            array.push(fibLevelsB, 0.88)
            array.push(fibLevelsB, 0.90)

        for i = 0 to array.size(fibLevelsB) - 1
            fibVal = array.get(fibLevelsB, i)
            predD = if X > A
                X - fibVal * (X - A)
            else
                X + fibVal * (A - X)

            if useConfluence
                confluenceBat = if X > A
                    (C - 2.0 * BC)
                else
                    (C + 2.0 * BC)

                if not na(confluenceBat)
                    midD = (predD + confluenceBat) / 2.0
                    if isBullish
                        f_drawPredictedD("Potential Bullish Bat (conf.)", colorPartialBull, X, A, B, C, midD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                        f_drawRangeAroundPrice(predictedD_bar, midD, colorPartialBull, rangePercent)
                    if isBearish
                        f_drawPredictedD("Potential Bearish Bat (conf.)", colorPartialBear, X, A, B, C, midD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                        f_drawRangeAroundPrice(predictedD_bar, midD, colorPartialBear, rangePercent)
            else
                if isBullish
                    f_drawPredictedD("Potential Bullish Bat", colorPartialBull, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBull, rangePercent)
                if isBearish
                    f_drawPredictedD("Potential Bearish Bat", colorPartialBear, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBear, rangePercent)

    // -------------------- PREDYKCYJNY BUTTERFLY -----------------------
    isPotentialButterfly = (ratioAB >= (0.786 - tol) and ratioAB <= (0.786 + tol)) and (ratioBC >= (0.382 - tol) and ratioBC <= (0.886 + tol))
    bcFillButterfly = (ratioBC - (0.382 - tol)) / ((0.886 + tol) - (0.382 - tol))
    canPredictButterfly = isPotentialButterfly and (bcFillButterfly >= incompleteThreshold)

    if canPredictButterfly
        fibLevelsButterfly = array.new_float()
        array.push(fibLevelsButterfly, 1.27)
        if extendedFiboLevels
            array.push(fibLevelsButterfly, 1.24)
            array.push(fibLevelsButterfly, 1.272)

        for i = 0 to array.size(fibLevelsButterfly) - 1
            fibVal = array.get(fibLevelsButterfly, i)
            predD = if X > A
                X - fibVal * (X - A)
            else
                X + fibVal * (A - X)

            if useConfluence
                confluenceBut = if X > A
                    (C - 1.618 * BC)
                else
                    (C + 1.618 * BC)
                if not na(confluenceBut)
                    midD = (predD + confluenceBut) / 2.0
                    if isBullish
                        f_drawPredictedD("Potential Bullish Butterfly (conf.)", colorPartialBull, X, A, B, C, midD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                        f_drawRangeAroundPrice(predictedD_bar, midD, colorPartialBull, rangePercent)
                    if isBearish
                        f_drawPredictedD("Potential Bearish Butterfly (conf.)", colorPartialBear, X, A, B, C, midD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                        f_drawRangeAroundPrice(predictedD_bar, midD, colorPartialBear, rangePercent)
            else
                if isBullish
                    f_drawPredictedD("Potential Bullish Butterfly", colorPartialBull, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBull, rangePercent)
                if isBearish
                    f_drawPredictedD("Potential Bearish Butterfly", colorPartialBear, X, A, B, C, predD, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                    f_drawRangeAroundPrice(predictedD_bar, predD, colorPartialBear, rangePercent)

    // -------------------- PREDYKCYJNY SHARK ---------------------------
    isPotentialShark = (ratioAB >= (0.5 - tol) and ratioAB <= (0.5 + tol))
    if isPotentialShark
        predDShark = if X > A
            X - 1.13 * (X - A)
        else
            X + 1.13 * (A - X)

        if extendedFiboLevels
            predDShark2 = if X > A
                X - 1.15 * (X - A)
            else
                X + 1.15 * (A - X)
            predDShark3 = if X > A
                X - 1.11 * (X - A)
            else
                X + 1.11 * (A - X)

            if isBullish
                f_drawPredictedD("Potential Bullish Shark(1)", colorPartialBull, X, A, B, C, predDShark, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark, colorPartialBull, rangePercent)
                f_drawPredictedD("Potential Bullish Shark(2)", colorPartialBull, X, A, B, C, predDShark2, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark2, colorPartialBull, rangePercent)
                f_drawPredictedD("Potential Bullish Shark(3)", colorPartialBull, X, A, B, C, predDShark3, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark3, colorPartialBull, rangePercent)

            if isBearish
                f_drawPredictedD("Potential Bearish Shark(1)", colorPartialBear, X, A, B, C, predDShark, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark, colorPartialBear, rangePercent)
                f_drawPredictedD("Potential Bearish Shark(2)", colorPartialBear, X, A, B, C, predDShark2, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark2, colorPartialBear, rangePercent)
                f_drawPredictedD("Potential Bearish Shark(3)", colorPartialBear, X, A, B, C, predDShark3, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark3, colorPartialBear, rangePercent)
        else
            if isBullish
                f_drawPredictedD("Potential Bullish Shark", colorPartialBull, X, A, B, C, predDShark, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark, colorPartialBull, rangePercent)

            if isBearish
                f_drawPredictedD("Potential Bearish Shark", colorPartialBear, X, A, B, C, predDShark, X_bar, A_bar, B_bar, C_bar, predictedD_bar)
                f_drawRangeAroundPrice(predictedD_bar, predDShark, colorPartialBear, rangePercent)
